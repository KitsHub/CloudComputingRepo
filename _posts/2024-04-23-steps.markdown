---
layout: post
title:  "Building a Multi-Container Application with Docker Compose"
date:   2024-04-23 09:15:23 +0530
categories: jekyll update
---
In this tutorial, we'll walk through the process of building a multi-container application using Docker Compose. We'll create a simple web application with both frontend and backend components, each running in its own Docker container. By using Docker Compose, we can define and manage the multi-container setup with ease.


**Prerequisites**

Before getting started, ensure you have the following:

-Docker installed on your local machine
-A Docker Hub account

**Step 1: Setting up the Project**

First, you'll need to build the Docker image you want to upload. This typically involves creating a **Dockerfile** that specifies the configuration for your image and then using the **docker build** command to build it.

Here's an example **Dockerfile** for a simple Node.js application:

{% highlight bash %}

mkdir multi-container-app
cd multi-container-app

{% highlight Dockerfile %}
docker build -t kirtan2604/ia2-image:tag .
{% endhighlight %}

**Step 2:  Creating the Frontend Container**

We'll start by creating the frontend container using the httpd image. Create a file named docker-compose.yml in your project directory and add the following content:

{% highlight yaml %}
version: "3"
services:
  frontend:
    image: httpd:latest
    volumes:
      - "./frontend:/usr/local/apache2/htdocs"
    ports:
      - "3000:80"
{% endhighlight %}

**Step 3: Setting Up the Backend Container**

Next, let's define the backend container. Create a Dockerfile in your project directory with the following content:

{% highlight Dockerfile %}
FROM php:7.4-apache
COPY ./api /var/www/html/
{% endhighlight %}

Now, update your docker-compose.yml file to include the backend service:

{% highlight Dockerfile %}
version: "3"
services:
  frontend:
    image: httpd:latest
    volumes:
      - "./frontend:/usr/local/apache2/htdocs"
    ports:
      - "3000:80"

  backend:
    container_name: simple-backend
    build:
      context: ./
      dockerfile: Dockerfile
    volumes:
      - "./api:/var/www/html/"
    ports:
      - "5000:80"

{% endhighlight %}

**Step 4: Running the Application**

To start the application, run the following command in your project directory:

{% highlight Dockerfile %}
docker-compose up
{% endhighlight %}

This command will build and start both the frontend and backend containers as defined in the docker-compose.yml file.

**Conclusion**

In this tutorial, we've learned how to build a multi-container application using Docker Compose. By defining our application's services in a docker-compose.yml file, we can easily manage the setup and deployment of our containers. This approach allows for efficient development and deployment of complex applications with multiple components.

